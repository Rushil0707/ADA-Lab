#include <stdio.h>
#include <stdlib.h>

// Queue implementation for BFS
struct Queue {
    int *items;
    int front, rear;
    unsigned capacity;
};

struct Queue *createQueue(unsigned capacity) {
    struct Queue *queue = (struct Queue *)malloc(sizeof(struct Queue));
    queue->capacity = capacity;
    queue->front = queue->rear = -1;
    queue->items = (int *)malloc(capacity * sizeof(int));
    return queue;
}

int isEmpty(struct Queue *queue) {
    return queue->front == -1;
}

void enqueue(struct Queue *queue, int item) {
    queue->items[++queue->rear] = item;
    if (queue->front == -1)
        queue->front = 0;
}

int dequeue(struct Queue *queue) {
    int item = queue->items[queue->front];
    if (queue->front == queue->rear)
        queue->front = queue->rear = -1;
    else
        queue->front++;
    return item;
}

void freeQueue(struct Queue *queue) {
    free(queue->items);
    free(queue);
}

// Stack implementation for DFS
struct Stack {
    int *items;
    int top;
    unsigned capacity;
};

struct Stack *createStack(unsigned capacity) {
    struct Stack *stack = (struct Stack *)malloc(sizeof(struct Stack));
    stack->capacity = capacity;
    stack->top = -1;
    stack->items = (int *)malloc(capacity * sizeof(int));
    return stack;
}

int isStackEmpty(struct Stack *stack) {
    return stack->top == -1;
}

void push(struct Stack *stack, int item) {
    stack->items[++stack->top] = item;
}

int pop(struct Stack *stack) {
    if (isStackEmpty(stack))
        return -1;
    return stack->items[stack->top--];
}

void freeStack(struct Stack *stack) {
    free(stack->items);
    free(stack);
}

// Graph structure
struct Graph {
    int V; // Number of vertices
    int **adj; // Adjacency list
};

struct Graph *createGraph(int V) {
    struct Graph *graph = (struct Graph *)malloc(sizeof(struct Graph));
    graph->V = V;
    graph->adj = (int **)malloc(V * sizeof(int *));
    for (int i = 0; i < V; i++) {
        graph->adj[i] = (int *)malloc(V * sizeof(int));
        for (int j = 0; j < V; j++)
            graph->adj[i][j] = 0;
    }
    return graph;
}

void addEdge(struct Graph *graph, int src, int dest) {
    graph->adj[src][dest] = 1;
}

void freeGraph(struct Graph *graph) {
    for (int i = 0; i < graph->V; i++)
        free(graph->adj[i]);
    free(graph->adj);
    free(graph);
}

// Perform DFS for topological sort
void topologicalSortDFSUtil(struct Graph *graph, int v, int *visited, struct Stack *stack) {
    visited[v] = 1;

    for (int i = 0; i < graph->V; i++) {
        if (graph->adj[v][i] && !visited[i]) {
            topologicalSortDFSUtil(graph, i, visited, stack);
        }
    }

    push(stack, v);
}

void topologicalSortDFS(struct Graph *graph) {
    struct Stack *stack = createStack(graph->V);
    int *visited = (int *)malloc(graph->V * sizeof(int));

    for (int i = 0; i < graph->V; i++)
        visited[i] = 0;

    for (int i = 0; i < graph->V; i++) {
        if (!visited[i]) {
            topologicalSortDFSUtil(graph, i, visited, stack);
        }
    }

    printf("Topological Sort (DFS): ");
    while (!isStackEmpty(stack)) {
        printf("%d ", pop(stack));
    }
    printf("\n");

    free(visited);
    freeStack(stack);
}

// Perform BFS for topological sort
void topologicalSortBFS(struct Graph *graph) {
    int *indegree = (int *)malloc(graph->V * sizeof(int));
    struct Queue *queue = createQueue(graph->V);
    int count = 0;

    // Calculate in-degree of each vertex
    for (int i = 0; i < graph->V; i++) {
        indegree[i] = 0;
        for (int j = 0; j < graph->V; j++) {
            if (graph->adj[j][i]) {
                indegree[i]++;
            }
        }
        if (indegree[i] == 0) {
            enqueue(queue, i);
        }
    }

    printf("Topological Sort (BFS): ");
    while (!isEmpty(queue)) {
        int v = dequeue(queue);
        printf("%d ", v);
        count++;
        for (int i = 0; i < graph->V; i++) {
            if (graph->adj[v][i]) {
                indegree[i]--;
                if (indegree[i] == 0) {
                    enqueue(queue, i);
                }
            }
        }
    }
    printf("\n");

    if (count != graph->V) {
        printf("Graph contains cycle, topological sort not possible.\n");
    }

    free(indegree);
    freeQueue(queue);
}

int main() {
    int V = 6;
    struct Graph *graph = createGraph(V);

    addEdge(graph, 5, 2);
    addEdge(graph, 5, 0);
    addEdge(graph, 4, 0);
    addEdge(graph, 4, 1);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 1);

    topologicalSortDFS(graph);
    topologicalSortBFS(graph);

    freeGraph(graph);

    return 0;
}
